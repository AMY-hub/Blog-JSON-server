{
  "React-Blog": {
    "posts": [{
        "title": "CSS transitions Edited",
        "body": "<p>The idea of CSS transitions is simple. We describe a property and how its changes should be animated. When the property changes, the browser paints the animation.</p> <p>That is, all we need is to change the property, and the fluid transition will be done by the browser.</p> <p> <h5>There are 4 properties to describe CSS transitions:</h5><ul> <li>transition-property</li> <li>transition-duration</li><li>transition-timing-function</li><li>transition-delay.</li></ul>",
        "preview": "<p>The idea of CSS transitions is simple. We describe a property and how its changes should be animated. When the property changes, the browser paints the animation.</p>",
        "topic": "css",
        "author": "Amy",
        "authorId": 5,
        "createdAt": 1656586067891,
        "id": 1
      },
      {
        "title": "The display Property",
        "body": "<p>The display property specifies if how an element is displayed.</p> <p>Every HTML element has a default display value depending on what type of element it is. The default display value for most elements is block or inline.</p> <h4>A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).</h4> <p>Examples of block-level elements:</p> <ul> <li><div></li> <li><h1 > - < h6 ></li> <li>< p ></li> <li>< form ></li> <li>< header ></li> <li>< footer ></li> <li>< section ></li> </ul> <h4>Inline Elements</h4> <p>An inline element does not start on a new line and only takes up as much width as necessary.</p> <p>Examples of inline elements:</p> <ul> <li><span></li> <li><a></li> <li><img></li> </ul> <h4>Display: none;</h4> <p>display: none; is commonly used with JavaScript to hide and show elements without deleting and recreating them. Take a look at our last example on this page if you want to know how this can be achieved.</p> <p>The <script> element uses display: none; as default.</p>",
        "preview": "<p>The display property specifies if how an element is displayed.</p> <p>Every HTML element has a default display value depending on what type of element it is. The default display value for most elements is block or inline.</p>",
        "topic": "css",
        "author": "Amy",
        "authorId": 5,
        "createdAt": 1656586077987,
        "id": 2
      },
      {
        "title": "HTML Form Attributes",
        "preview": "<h4>The Action Attribute</h4> <p>The action attribute defines the action to be performed when the form is submitted.\nUsually, the form data is sent to a file on the server when the user clicks on the submit button.\nTip: If the action attribute is omitted,the action is set to the current page.</p>",
        "body": "<h4>The Action Attribute</h4> <p>The action attribute defines the action to be performed when the form is submitted.\nUsually, the form data is sent to a file on the server when the user clicks on the submit button.\nTip: If the action attribute is omitted,the action is set to the current page.</p> <p>\nThe Target Attribute\nThe target attribute specifies where to display the response that is received after submitting the form.\nThe target attribute can have one of the following values:\n_blank - The response is displayed in a new window or tab\n_self - The response is displayed in the current window\n_parent - The response is displayed in the parent frame\n_top - The response is displayed in the full body of the window\nframename - The response is displayed in a named iframe\nThe default value is _self which means that the response will open in the current window.\nThe Method Attribute\nThe method attribute specifies the HTTP method to be used when submitting the form data.\nThe form - data can be sent as URL variables(with method = \"get\") or as HTTP post transaction(with method = \"post\").\nThe default HTTP method when submitting form data is GET.</p>",
        "author": "Amy",
        "authorId": 5,
        "topic": "html",
        "createdAt": 1655202557420,
        "id": 3
      },
      {
        "title": "The HTML <script> Tag",
        "body": "<h4>Text</h4>",
        "preview": "<p>\nThe <script> element either contains script statements, or it points to an external script file through the src attribute.\nCommon uses for JavaScript are image manipulation, form validation, and dynamic changes of content.\nTo select an HTML element, JavaScript most often uses the document.getElementById() method.\nThe HTML <noscript>Tag\nThe HTML <noscript> tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support scripts.</p>",
        "topic": "html",
        "author": "Amy",
        "authorId": 5,
        "createdAt": 1656595659525,
        "id": 4
      },
      {
        "title": "JavaScript JSON",
        "preview": "<h4>What is JSON?</h4> <p>JSON stands for JavaScript Object Notation\nJSON is a lightweight data interchange format\nJSON is language independent\n*JSON is \"self-describing\" and easy to understand \n*The JSON syntax is derived from JavaScript object notation syntax,but the JSON format is text only.Code for reading and generating JSON data can be written in any programming language.\nThe JSON Format Evaluates to JavaScript Object/\nThe JSON format is syntactically identical to the code for creating JavaScript objects.\nBecause of this similarity, a JavaScript program can easily convert JSON data into native JavaScript objects.\nJSON Syntax Rules:\n- Data is in name/value pairs\n- Data is separated by commas\n- Curly braces hold objects\n- Square brackets hold arrays</p>",
        "body": "<h4>What is JSON?</h4> <p>JSON stands for JavaScript Object Notation\nJSON is a lightweight data interchange format\nJSON is language independent\n*JSON is \"self-describing\" and easy to understand \n*The JSON syntax is derived from JavaScript object notation syntax,but the JSON format is text only.Code for reading and generating JSON data can be written in any programming language.\nThe JSON Format Evaluates to JavaScript Object/\nThe JSON format is syntactically identical to the code for creating JavaScript objects.\nBecause of this similarity, a JavaScript program can easily convert JSON data into native JavaScript objects.\nJSON Syntax Rules:\n- Data is in name/value pairs\n- Data is separated by commas\n- Curly braces hold objects\n- Square brackets hold arrays</p>",
        "author": "Amy",
        "authorId": 5,
        "topic": "javascript",
        "createdAt": 1655202557420,
        "id": 5
      },
      {
        "title": "What are Cookies?",
        "preview": "<h4>Cookies are data, stored in small text files, on your computer.</h4>",
        "body": "<h4>Cookies are data, stored in small text files, on your computer.</h4> <p>\nWhen a web server has sent a web page to a browser,the connection is shut down,and the server forgets everything about the user.\nCookies were invented to solve the problem \"how to remember information about the user\":\n- When a user visits a web page, his / her name can be stored in a cookie.\n- Next time the user visits the page,the cookie \"remembers\"his / her name.\n- When a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server gets the necessary data to \"remember\" information about users.\nNone of the examples below will work if your browser has local cookies support turned off.</p>",
        "author": "Amy",
        "authorId": 5,
        "topic": "javascript",
        "createdAt": 1655202557420,
        "id": 6
      },
      {
        "title": "Map",
        "preview": "<p>Map is a collection of keyed data items, just like an <code>Object</code>. But the main difference is that <code>Map</code> allows keys of any type.<br></p>",
        "body": "<p>Map is a collection of keyed data items, just like an <code>Object</code>. But the main difference is that <code>Map</code> allows keys of any type.<br></p><p>Methods and properties are:</p><ul><li><p><code>new Map()</code> – creates the map.</p></li><li><p><code>map.set(key, value)</code> – stores the value by the key.</p></li><li><p><code>map.get(key)</code> – returns the value by the key, <code>undefined</code> if <code>key</code> doesn’t exist in map.</p></li><li><p><code>map.has(key)</code> – returns <code>true</code> if the <code>key</code> exists, <code>false</code> otherwise.</p></li><li><p><code>map.delete(key)</code> – removes the value by the key.</p></li><li><p><code>map.clear()</code> – removes everything from the map.</p></li><li><p><code>map.size</code> – returns the current element count.</p></li></ul>",
        "topic": "javascript",
        "author": "Amy",
        "authorId": 5,
        "createdAt": 1655371258462,
        "id": 11
      },
      {
        "title": "Title",
        "preview": "<p>Similarly to Unix, we then have three digits to match each user type :</p><ul><li><p>First digit are the permissions for the <strong>resource owner</strong>.</p></li><li><p>Second digit are the permissions for the <strong>logged-in users</strong>.</p></li><li><p>Third digit are the permissions for the <strong>public users</strong>.</p></li></ul>",
        "body": "<p>Similarly to Unix, we then have three digits to match each user type :</p><ul><li><p>First digit are the permissions for the <strong>resource owner</strong>.</p></li><li><p>Second digit are the permissions for the <strong>logged-in users</strong>.</p></li><li><p>Third digit are the permissions for the <strong>public users</strong>.</p></li></ul>",
        "topic": "javascript",
        "author": "Amy",
        "authorId": 5,
        "createdAt": 1655883263856,
        "id": 12
      },
      {
        "title": "SomeTitle",
        "preview": "<p>JSON Server Auth provides generic guards as <strong>route middlewares</strong>.",
        "body": "<p>JSON Server Auth provides generic guards as <strong>route middlewares</strong>.</p><p>To handle common use cases, JSON Server Auth draws inspiration from <strong>Unix filesystem permissions</strong>, especialy the <strong>numeric notation</strong>.</p><ul><li><p>We add <code>4</code> for <strong>read</strong> permission.</p></li><li><p>We add <code>2</code> for <strong>write</strong> permission.</p></li></ul><p><em>Of course CRUD is not a filesystem, so we don't add 1 for execute permission.</em></p><p>Similarly to Unix, we then have three digits to match each user type :</p><ul><li><p>First digit are the permissions for the <strong>resource owner</strong>.</p></li><li><p>Second digit are the permissions for the <strong>logged-in users</strong>.</p></li><li><p>Third digit are the permissions for the <strong>public users</strong>.</p></li></ul>",
        "topic": "javascript",
        "author": "ER",
        "authorId": 4,
        "createdAt": 1655895603564,
        "id": 13
      },
      {
        "title": "Test2",
        "body": "<p>Some Text</p>",
        "preview": "<p>Preview</p>",
        "topic": "javascript",
        "author": "ER",
        "userId": 4,
        "createdAt": 1656188923691,
        "id": 16
      },
      {
        "title": "Test4",
        "body": "<p>test</p>",
        "preview": "<p>Test</p>",
        "topic": "html",
        "author": "Amy",
        "authorId": 5,
        "createdAt": 1656238852944,
        "id": 17
      },
      {
        "title": "CSS transitions",
        "body": "<p>The idea of CSS transitions is simple. We describe a property and how its changes should be animated. When the property changes, the browser paints the animation.</p> <p>That is, all we need is to change the property, and the fluid transition will be done by the browser.</p> <p> <h5>There are 4 properties to describe CSS transitions:</h5><ul> <li>transition-property</li> <li>transition-duration</li><li>transition-timing-function</li><li>transition-delay.</li></ul>",
        "preview": "<p>The idea of CSS transitions is simple. We describe a property and how its changes should be animated. When the property changes, the browser paints the animation.</p>",
        "topic": "css",
        "author": "Amy",
        "authorId": 5,
        "createdAt": 1656238911900,
        "id": 18
      },
      {
        "title": "Test",
        "body": "<p>e</p>",
        "preview": "<p>e</p>",
        "topic": "html",
        "author": "Amy",
        "authorId": 5,
        "createdAt": 1656314353859,
        "id": 21
      },
      {
        "title": "sfsfs",
        "body": "<p>sfsf</p>",
        "preview": "<p>sfsf</p>",
        "topic": "html",
        "author": "Amy",
        "authorId": 5,
        "createdAt": 1656491135698,
        "id": 22
      }
    ],
    "users": [{
        "email": "testm@gmail.com",
        "password": "$2a$10$H6FlsSkKqMWh9EvRRXIQReFqhdpec0izmqBihDl4Dol5N9WAe6SYO",
        "name": "ER",
        "id": 4
      },
      {
        "email": "mymail@yandex.ru",
        "password": "$2a$10$10.dB2sZawpeHVkWgPThgedTloqI.J93Wx2yt4ArJBaQwRfBgq0he",
        "name": "Amy",
        "id": 5
      },
      {
        "email": "test@yandex.ru",
        "password": "$2a$10$vsco9vQi2pilnSSFreDdBOENHfQwBwchviryOrYOfBPc/W9OI06wO",
        "name": "Test",
        "id": 6
      },
      {
        "email": "tester@yandex.ru",
        "password": "$2a$10$Rkty5F8Wx3AilZPSLR4xtuD/s9WQQR30B77RtQdtXAqg2rfw.Sz5K",
        "name": "Tester",
        "id": 7
      },
      {
        "email": "tester2@yandex.ru",
        "password": "$2a$10$g16L2hkr39SXUFCydTeXgu1B9VLAVeClxtRFT5mBzJRauX0lGYKge",
        "name": "Tester",
        "id": 8
      }
    ]
  }
}